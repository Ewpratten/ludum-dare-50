initSidebarItems({"fn":[["init","Creates a `RaylibBuilder` for choosing window options before initialization."]],"mod":[["audio","Contains code related to audio. [`RaylibAudio`] plays sounds and music."],["camera","Utility code for using Raylib [`Camera3D`] and [`Camera2D`]"],["collision","Common collision handling code"],["color","[`Color`] manipulation helpers"],["data","Data manipulation functions. Compress and Decompress with DEFLATE"],["drawing","Contains code related to drawing. Types that can be set as a surface to draw will implement the [`RaylibDraw`] trait"],["file","File manipulation functions. Should be parity with std::fs except on emscripten"],["input","Keyboard, Controller, and Mouse related functions"],["logging",""],["math",""],["misc","Useful functions that donâ€™t fit anywhere else"],["models","3D Model, Mesh, and Animation"],["shaders","Code for the safe manipulation of shaders"],["text","Text and Font related functions Text manipulation functions are super unsafe so use rust String functions"],["texture","Image and texture related functions"],["vr","Vr related functions"],["window","Window manipulation functions"]],"struct":[["RaylibBuilder","A builder that allows more customization of the game window shown to the user before the `RaylibHandle` is created."],["RaylibHandle","The main interface into the Raylib API."],["RaylibThread","This token is used to ensure certain functions are only running on the same thread raylib was initialized from. This is useful for architectures like macos where cocoa can only be called from one thread."]]});